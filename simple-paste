#!/bin/bash

# simple-paste
# This file is part of simple paste -- cli based paste client
#
# Copyright 2017 Markus Meyer <coruja@siduction.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

# Default options
SP_URL="https://ptpb.pw/"
SP_SUNSET="-F sunset=1209600"
SP_SIZE_LIMIT=20971520
SP_DELAY=3

# Check for config files and load them if they exist
[ -f /etc/default/simple-paste.conf ] && source /etc/default/simple-paste.conf
[ -f /etc/simple-paste/simple-paste.conf ] && source /etc/simple-paste/simple-paste.conf
[ -f $HOME/.config/simple-paste.conf ] && source $HOME/.config/simple-paste.conf

# Set initial function to call (which may be changed later)
SP_COMMAND="upload"

# Some functions...
help () {
	echo "Usage:   COMMAND | simple-paste [-e TIME]"
	echo "         simple-paste -a|-s|-w [-d DELAY] [-e TIME]"
	echo "         simple-paste [-e TIME] FILE"
	echo "         simple-paste URL"
	echo "         simple-paste -x UUID"
	echo "Options: -a        paste screenshot of selected rectangle area"
	echo "         -d DELAY  set delay in seconds for full screen and window screenshots"
	echo "                   (default: 3 seconds)"
	echo "         -e TIME   make paste be auto-deleted after TIME (default: 14 days)"
	echo "                   TIME must be Ns (seconds), Nm (minutes), Nh (hours),"
	echo "                   N or Nd (days), or Ny (years), e.g. 3h for 3 hours"
	echo "         -s        paste screenshot of whole screen"
	echo "         -w        paste screenshot of focused window"
	echo "         -x UUID   delete paste by its uuid"
	exit 0
}

seconds () {
	case ${1: -1} in
		s)		s=${1:0:$(( ${#1} - 1 ))}
				;;
		m)		s=$(( ${1:0:$(( ${#1} - 1 ))} * 60 ))
				;;
		h)		s=$(( ${1:0:$(( ${#1} - 1 ))} * 3600 ))
				;;
		d)		s=$(( ${1:0:$(( ${#1} - 1 ))} * 86400 ))
				;;
		y)		s=$(( ${1:0:$(( ${#1} - 1 ))} * 31536000 ))
				;;
		[0-9])	s=$(( $1 * 86400 ))
				;;
	esac
}

check () {
	if [ $# -ne 1 ]
	then
		help
	else
		if [ -f $1 ]
		then
			if (( $(stat -c %s $1) < $SP_SIZE_LIMIT ))
			then
				SP_COMMAND="$SP_COMMAND $1"
			else
				echo "E: File size of '$1' exceeds the file size limit, aborting..."
				exit 1
			fi
		elif [[ $1 =~ ^http[s]?://.*$ ]]
		then
			SP_COMMAND="shorten_url $1"
		else
			help
		fi
	fi
}

upload () {
	curl $SP_SUNSET -F "c=@${1:--}" $SP_URL
}

delete () {
	curl -X DELETE $SP_URL$1
}

screenshot () {
	scrot -z -c -d $SP_DELAY "$@" /tmp/$$.jpg
	upload /tmp/$$.jpg
}

shorten_url () {
	curl -F c=@- https://ptpb.pw/u <<< $1
}

# Display help if neither an argument nor piped input is given
if [ $# -eq 0 ] && [ ! -p /dev/fd/0 ]
then
	help
fi

# Parse options and set function to call and its options
while getopts "ad:e:swx:" o
do
	case $o in
		a)	SP_DELAY=0
			SP_COMMAND="screenshot -s"
			;;
		d)	SP_DELAY="$OPTARG"
			;;
		e)	seconds $OPTARG
			SP_SUNSET="-F sunset=$s"
			;;
		s)	SP_COMMAND="screenshot"
			;;
		w)	SP_COMMAND="screenshot -u -b"
			;;
		x)	SP_COMMAND="delete $OPTARG"
			;;
		*)	help
			;;
	esac
done

# Remove all options from arguments
shift $((OPTIND - 1))

# Check arguments if there are any left
if [ $# -ne 0 ]
then
	check "$@"
fi

# Finally call the previously set function
$SP_COMMAND
